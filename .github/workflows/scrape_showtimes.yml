name: Scrape Movie Showtimes (No Gemini)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Runs every day at 15:00 UTC (00:00 JST next day)
    - cron: '0 15 * * *'

jobs:
  scrape_and_commit:
    runs-on: ubuntu-latest # Use a Linux runner

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your preferred Python version

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          echo "Google Chrome version:"
          google-chrome --version

      - name: Install ChromeDriver
        run: |
          # Get full Chrome version (e.g., 125.0.6422.76)
          CHROME_VERSION_FULL_STRING=$(google-chrome --version)
          echo "Full Chrome Version String: $CHROME_VERSION_FULL_STRING"
          
          # Extract the full version number (e.g., 125.0.6422.76)
          CHROME_VERSION_NUMBER=$(echo "$CHROME_VERSION_FULL_STRING" | awk '{print $3}')
          echo "Detected Chrome Version Number: $CHROME_VERSION_NUMBER"

          # Get the ChromeDriver download URL for this specific Chrome version
          # Uses the new Chrome for Testing JSON endpoints
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | jq -r --arg version "$CHROME_VERSION_NUMBER" '.versions[] | select(.version==$version) | .downloads.chromedriver[] | select(.platform=="linux64") | .url' | head -n 1)

          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "Could not find exact match ChromeDriver for Chrome $CHROME_VERSION_NUMBER. Trying to find closest match by major version."
            CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION_NUMBER" | cut -d. -f1)
            # Fallback: Get the latest stable ChromeDriver URL for the major version if exact match fails
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r --arg major_version "$CHROME_MAJOR_VERSION" '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64" and (.url | contains($major_version))) | .url' | head -n1 )
          fi
          
          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "ERROR: Failed to determine ChromeDriver download URL. Exiting."
            exit 1
          fi

          echo "Using ChromeDriver URL: $CHROMEDRIVER_URL"
          wget -O chromedriver_linux64.zip "$CHROMEDRIVER_URL"
          # Unzip and move, ensure correct internal path of the zip
          unzip chromedriver_linux64.zip -d ./chromedriver_temp
          # The zip from chrome-for-testing often has a structure like: chromedriver-linux64/chromedriver
          if [ -f ./chromedriver_temp/chromedriver-linux64/chromedriver ]; then
            sudo mv ./chromedriver_temp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          elif [ -f ./chromedriver_temp/chromedriver ]; then # Sometimes it's directly in the zip
            sudo mv ./chromedriver_temp/chromedriver /usr/local/bin/chromedriver
          else
            echo "ERROR: chromedriver executable not found in expected path within zip."
            ls -R ./chromedriver_temp # List contents for debugging
            exit 1
          fi
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver_linux64.zip ./chromedriver_temp # Clean up
          echo "ChromeDriver version installed:"
          chromedriver --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Ensure requirements.txt does NOT necessarily need google-generativeai if you're not using Gemini
          pip install -r requirements.txt 

      - name: Run scraper script
        # No GEMINI_API_KEY needed here
        run: python main_scraper2.py # Assuming your reverted main scraper is named this

      - name: Commit and push showtimes.json
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add showtimes.json # Or whatever your output JSON file is named
          if git diff --staged --quiet; then
            echo "No changes to showtimes.json to commit."
          else
            git commit -m "Automated update of showtimes.json"
            git push
            echo "showtimes.json committed and pushed."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
