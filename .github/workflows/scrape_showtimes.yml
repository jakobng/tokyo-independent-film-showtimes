name: Scrape Movie Showtimes (TMDB/Letterboxd Focused)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Runs every day at 00:05 UTC (09:05 JST next day)
    - cron: '5 0 * * *'

jobs:
  scrape_and_commit:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your preferred Python version

      - name: Install Google Chrome and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable jq # Install jq for JSON parsing
          echo "Google Chrome version:"
          google-chrome --version

      - name: Install ChromeDriver
        run: |
          CHROME_VERSION_FULL_STRING=$(google-chrome --version)
          echo "Full Chrome Version String: $CHROME_VERSION_FULL_STRING"
          CHROME_VERSION_NUMBER=$(echo "$CHROME_VERSION_FULL_STRING" | awk '{print $3}')
          echo "Detected Chrome Version Number: $CHROME_VERSION_NUMBER"
          
          # Use the Chrome for Testing JSON endpoints to get the correct ChromeDriver URL
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | jq -r --arg version "$CHROME_VERSION_NUMBER" '.versions[] | select(.version==$version) | .downloads.chromedriver[] | select(.platform=="linux64") | .url' | head -n 1)

          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "Could not find exact match ChromeDriver for Chrome $CHROME_VERSION_NUMBER. Trying to find closest match by major version."
            # Fallback to the last known good version for the major channel if exact match not found
            CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION_NUMBER" | cut -d. -f1)
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r --arg major_version "$CHROME_MAJOR_VERSION" '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url' | head -n1 )
          fi
          
          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "ERROR: Failed to determine ChromeDriver download URL. Exiting."
            exit 1
          fi

          echo "Using ChromeDriver URL: $CHROMEDRIVER_URL"
          wget -O chromedriver_linux64.zip "$CHROMEDRIVER_URL"
          unzip chromedriver_linux64.zip -d ./chromedriver_temp
          
          if [ -f ./chromedriver_temp/chromedriver-linux64/chromedriver ]; then
            sudo mv ./chromedriver_temp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          elif [ -f ./chromedriver_temp/chromedriver ]; then
            sudo mv ./chromedriver_temp/chromedriver /usr/local/bin/chromedriver
          else
            echo "ERROR: chromedriver executable not found in expected path within zip."
            ls -R ./chromedriver_temp 
            exit 1
          fi
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver_linux64.zip ./chromedriver_temp
          echo "ChromeDriver version installed:"
          chromedriver --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Force upgrade of the Gemini library to fix latency issues
          pip install --upgrade google-generativeai
          pip install -r requirements.txt

      # ADDED: Caching step to persist the tmdb_cache.json file between runs
      - name: Cache TMDB data
        uses: actions/cache@v4
        with:
          path: tmdb_cache.json
          key: ${{ runner.os }}-tmdb-cache-${{ hashFiles('**/main_scraper.py') }}
          restore-keys: |
            ${{ runner.os }}-tmdb-cache-

      - name: Run scraper script
        run: python main_scraper.py
        env:
          # IMPORTANT: Your TMDB_API_KEY and GEMINI_API_KEY must be configured as secrets
          # in your repository's Settings > Secrets and variables > Actions
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Commit and push generated files
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Stage the generated files
          git add showtimes.json 
          git add tmdb_cache.json 

          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0 # Exit successfully if no changes to commit
          fi

          # Commit the staged changes locally
          git commit -m "Automated update of showtimes and cache files"
          
          # Pull latest changes from the remote before pushing
          git pull origin main --rebase
          
          # Push the rebased commit to the remote repository
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
